<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on 王子滔的学习笔记</title>
    <link>https://wangzitao6.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml</link>
    <description>Recent content in 设计模式 on 王子滔的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://wangzitao6.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>设计模式之单例模式</title>
      <link>https://wangzitao6.github.io/2018-11-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</link>
      <pubDate>Mon, 12 Nov 2018 15:11:17 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-11-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</guid>
      <description>

&lt;h2 id=&#34;单例模式&#34;&gt;单例模式&lt;/h2&gt;

&lt;p&gt;首先我们来考虑下，&lt;strong&gt;如何设计一个类，在系统中只能生成该类的一个实体?&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;懒汉-线程不安全&#34;&gt;懒汉，线程不安全&lt;/h3&gt;

&lt;p&gt;面对这个问题，我们可以想到把构造函数私有化，以禁止他人创建实例，我们可以写一个静态的实例，在需要的时候创建它。我们可以得到以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// version 1.0
public class Singleton {
    private static Singleton singleton = null;

    private Singleton() {  }

    public static Singleton getInstance() {
        if (singleton== null) {
            singleton= new Singleton();
        }
        return singleton;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;私有（private）的构造函数，表明这个类是不可能形成实例了。这主要是怕这个类会有多个实例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;即然这个类是不可能形成实例，那么，我们需要一个静态的方式让其形成实例：getInstance()。注意这个方法是在new自己，因为其可以访问私有的构造函数，所以他是可以保证实例被创建出来的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在getInstance()中，先做判断是否已形成实例，如果已形成则直接返回，否则创建实例。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;所形成的实例保存在自己类中的私有成员中。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;我们取实例时，只需要使用Singleton.getInstance()就行了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;懒汉-线程安全&#34;&gt;懒汉，线程安全&lt;/h3&gt;

&lt;p&gt;上述代码在单线程下运行时没有问题的，但是放在多线程环境下就可能出问题。比如：当系统中不存在Singleton实例时，两个线程同时运行到判断 if (singleton== null) 时，那么两个线程都会通过判断并创建实例。就不符合单例模式的要求了。为了保护多线程环境下运行，我们需要加上同步锁，得到以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// version 2.0
public class Singleton
{
    private static Singleton singleton = null;

    private Singleton() {  }

    public static Singleton getInstance() {
        //加上同步锁
        synchronized (Singleton.class) {
            if (singleton== null) {
                singleton= new Singleton();
            }
        }
        return singleton;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的话，假如出现当系统中不存在Singleton实例时，两个线程同时运行到判断 if (singleton== null) 的情况时，两个线程想同时创建一个实例时，但由于在同一个时刻只有一个线程可以得到同步锁，当第一个线程加上锁时，第二个线程只有等待，第一个线程判断Singleton实例是否已经创建，发现没有实例，创建一个后释放锁，第二个线程加上同步锁，运行以上过程，发现实例已经被创建出来了，就不会重复创建了，这样可以保证我们在单线程环境中也只有一个实例。&lt;/p&gt;

&lt;p&gt;但是version 2.0版本还是有点小问题，我们每次调用getInstance()获取实例时，都会视图加上一个同步锁，而加锁是非常耗时的一个操作，在美有必要时我们应该尽量避免。&lt;/p&gt;

&lt;h3 id=&#34;双重校验锁&#34;&gt;双重校验锁&lt;/h3&gt;

&lt;p&gt;我们只是在没有创建实例前需要加锁，以保证只有一个实例，当实例创建后，已经不需要加锁了。所以我们可以改善代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// version 3.0
public class Singleton
{
    private static Singleton singleton = null;

    private Singleton()  {    }

    public static Singleton getInstance() {
        if (singleton== null)  {
            synchronized (Singleton.class) {
                if (singleton== null)  {
                    singleton= new Singleton();
                }
            }
        }
        return singleton;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样只需要在实例没有创建时需要加锁操作，实例创建后，不需要加锁，只有在Singleton == null时才会加锁，其他时候不需要，所以version 3.0 的效率要高于 version 2.0。&lt;/p&gt;

&lt;h3 id=&#34;双重校验锁-volatile&#34;&gt;双重校验锁+volatile&lt;/h3&gt;

&lt;p&gt;由于singleton = new Singleton()并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.给 singleton 分配内存
2.调用 Singleton 的构造函数来初始化成员变量，形成实例
3.将singleton对象指向分配的内存空间（执行完这步 singleton才是非 null 了）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。&lt;/p&gt;

&lt;p&gt;对此，我们只需要把singleton声明成 volatile 就可以了。下面我们优化代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// version 4.0
public class Singleton
{
    private volatile static Singleton singleton = null;

    private Singleton()  {    }

    public static Singleton getInstance()   {
        if (singleton== null)  {
            synchronized (Singleton.class) {
                if (singleton== null)  {
                    singleton= new Singleton();
                }
            }
        }
        return singleton;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 volatile 有两个功用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.这个变量不会在多个线程中存在复本，直接从内存读取。

2.这个关键字会禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是，这个事情仅在Java 1.5版后有用，1.5版之前用这个变量也有问题，因为老版本的Java的内存模型是有缺陷的。&lt;/p&gt;

&lt;p&gt;上面的代码比较复杂，我们能不能找一种更为优雅的方式?&lt;/p&gt;

&lt;h3 id=&#34;饿汉&#34;&gt;饿汉&lt;/h3&gt;

&lt;p&gt;答案是可以的，我们可以在声明实例的时候就初始化，单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// version 5.0
public class Singleton
{
    private volatile static Singleton singleton = new Singleton();

    private Singleton()  {    }

    public static Singleton getInstance()   {
        return singleton;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是由于 static 和 final 变量，当这个类被加载的时候，new Singleton() 这句话就会被执行，就算是getInstance()没有被调用，类也被初始化了。&lt;/p&gt;

&lt;p&gt;于是，这个可能会与我们想要的行为不一样，比如，我的类的构造函数中，有一些事可能需要依赖于别的类干的一些事（比如某个配置文件，初始化一些配置参数），我们希望他能在我第一次getInstance()时才被真正的创建。这样，我们可以控制真正的类创建的时刻，而不是把类的创建委托给了类装载器。&lt;/p&gt;

&lt;h3 id=&#34;静态内部类-推荐&#34;&gt;静态内部类（推荐）&lt;/h3&gt;

&lt;p&gt;对于上述我们不能控制类加载时机的问题，我们会想，如果什么时候调用 getInstance() 什么时候加载类就好了，因此我们可以优化代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// version 6.0
public class Singleton {
    //创建一个私有静态内部类 SingletonHolder 
    private static class SingletonHolder {
        private static final Singleton INSTANCE = new Singleton();
    }

    private Singleton (){ }

    public static final Singleton getInstance() {
        return SingletonHolder.INSTANCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这种方式，仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它只有在getInstance()被调用时才会真正创建；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。&lt;/p&gt;

&lt;h3 id=&#34;枚举-推荐&#34;&gt;枚举（推荐）&lt;/h3&gt;

&lt;p&gt;在《Effective Java》最后推荐了这样一个写法，简直有点颠覆，不仅超级简单，而且保证了线程安全。这里引用一下，此方法无偿提供了序列化机制，绝对防止多次实例化，及时面对复杂的序列化或者反射攻击。单元素枚举类型已经成为实现Singleton的最佳方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//version 7.0
public enum Singleton{
   INSTANCE;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;枚举法探究&#34;&gt;枚举法探究&lt;/h4&gt;

&lt;p&gt;很多人会对枚举法实现的单例模式很不理解。这里需要深入理解的是两个点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;枚举类实现其实省略了private类型的构造函数&lt;/li&gt;
&lt;li&gt;枚举类的域(field)其实是相应的enum类型的一个实例对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于第一点实际上enum内部是如下代码:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public enum Singleton {
    INSTANCE;
    // 这里隐藏了一个空的私有构造方法
    private Singleton () {
        System.out.println(&amp;quot;do something&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你这时候在另一个class中调用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String[] args) {
    System.out.println(Singleton.INSTANCE);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以看到:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do something
INSTANCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于一个标准的enum单例模式，最优秀的写法还是实现接口的形式:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 定义单例模式中需要完成的代码逻辑
public interface MySingleton {
    void doSomething();
}

public enum Singleton implements MySingleton {
    INSTANCE {
        @Override
        public void doSomething() {
            System.out.println(&amp;quot;complete singleton&amp;quot;);
        }
    };

    public static MySingleton getInstance() {
        return Singleton.INSTANCE;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
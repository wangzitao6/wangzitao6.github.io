<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>juc on 王子滔的学习笔记</title>
    <link>https://wangzitao6.github.io/tags/juc/index.xml</link>
    <description>Recent content in juc on 王子滔的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://wangzitao6.github.io/tags/juc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>AbstractQueuedSynchronizer超详细原理解析</title>
      <link>https://wangzitao6.github.io/2020-07-09-abstractqueuedsynchronizer%E8%B6%85%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90</link>
      <pubDate>Thu, 09 Jul 2020 16:40:03 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2020-07-09-abstractqueuedsynchronizer%E8%B6%85%E8%AF%A6%E7%BB%86%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90</guid>
      <description>

&lt;p&gt;今天我们来研究学习一下&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AbstractQueuedSynchronizer&lt;/strong&gt;&lt;/font&gt;类的相关原理，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;java.util.concurrent&lt;/strong&gt;&lt;/font&gt;包中很多类都依赖于这个类所提供队列式同步器，比如说常用的&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock&lt;/strong&gt;&lt;/font&gt;，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;Semaphore&lt;/strong&gt;&lt;/font&gt;和&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;CountDownLatch&lt;/strong&gt;&lt;/font&gt;等。
 为了方便理解，我们以一段使用 &lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock&lt;/strong&gt;&lt;/font&gt;的代码为例，讲解&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock&lt;/strong&gt;&lt;/font&gt;每个方法中有关AQS的使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangzitao-blog.oss-cn-hangzhou.aliyuncs.com/20/07/09/lock%E7%9A%84%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png&#34; alt=&#34;bb&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangzitao-blog.oss-cn-hangzhou.aliyuncs.com/20/07/09/%E5%A4%9A%E4%B8%AA%E5%9B%BE%E7%BB%84%E5%90%88.png&#34; alt=&#34;bb&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-0-reentranlock示例&#34;&gt;1.0 ReentranLock示例&lt;/h1&gt;

&lt;p&gt;我们都知道&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock&lt;/strong&gt;&lt;/font&gt;的加锁行为和&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;Synchronized&lt;/strong&gt;&lt;/font&gt;类似，都是可重入的锁，但是二者的实现方式确实完全不同的，我们之后也会讲解&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;Synchronized&lt;/strong&gt;&lt;/font&gt;的原理。**除此之外，Synchronized的阻塞无法被中断，而&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentrantLock&lt;/strong&gt;&lt;/font&gt;则提供了可中断的阻塞**。下面的代码是&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock&lt;/strong&gt;&lt;/font&gt;的函数，我们就以此为顺序，依次讲解这些函数背后的实现原理。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ReentrantLock lock = new ReentrantLock();
lock.lock();
lock.unlock();
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;2-0-公平锁和非公平锁&#34;&gt;2.0 公平锁和非公平锁&lt;/h1&gt;

&lt;p&gt;&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock&lt;/strong&gt;&lt;/font&gt;分为公平锁和非公平锁，二者的区别就在获取锁机会是否和排队顺序相关。我们都知道，如果锁被另一个线程持有，那么申请锁的其他线程会被挂起等待，加入等待队列。理论上，先调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;lock&lt;/strong&gt;&lt;/font&gt;函数被挂起等待的线程应该排在等待队列的前端，后调用的就排在后边。如果此时，锁被释放，需要通知等待线程再次尝试获取锁，公平锁会让最先进入队列的线程获得锁。而非公平锁则会唤醒所有线程，让它们再次尝试获取锁，所以可能会导致后来的线程先获得了锁，则就是非公平。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public ReentrantLock(boolean fair) {
    sync = fair ? new FairSync() : new NonfairSync();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们会发现&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;FairSync&lt;/strong&gt;&lt;/font&gt;和&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;NonfairSync&lt;/strong&gt;&lt;/font&gt;都继承了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;Sync&lt;/strong&gt;&lt;/font&gt;类，而&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;Sync&lt;/strong&gt;&lt;/font&gt;的父类就是&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AbstractQueuedSynchronizer&lt;/strong&gt;&lt;/font&gt;(后续简称AQS)。但是&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;的构造函数是空的,并没有任何操作。
 之后的源码分析，如果没有特别说明，就是指公平锁。&lt;/p&gt;

&lt;h1 id=&#34;3-0-lock操作&#34;&gt;3.0 Lock操作&lt;/h1&gt;

&lt;p&gt;&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentranLock的lock&lt;/strong&gt;&lt;/font&gt;函数如下所示，直接调用了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;sync&lt;/strong&gt;&lt;/font&gt; 的 &lt;font color =&#39;red&#39;&gt; &lt;strong&gt;lock&lt;/strong&gt;&lt;/font&gt;函数。也就是调用了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;FairSync的lock&lt;/strong&gt;&lt;/font&gt;函数。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//ReentranLock
public void lock() {
    sync.lock();
}
//FairSync
final void lock() {
    //调用了AQS的acquire函数,这是关键函数之一
    acquire(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们接下来就正式开始 &lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;相关的源码分析了， &lt;font color =&#39;red&#39;&gt; &lt;strong&gt;acquire&lt;/strong&gt;&lt;/font&gt;函数的作用是获取同一时间段内只能被一个线程获取的量，这个量就是抽象化的锁概念。我们先分析代码，你慢慢就会明白其中的含义。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final void acquire(int arg) {
    // tryAcquire先尝试获取&amp;quot;锁&amp;quot;,获取了就不进入后续流程
    if (!tryAcquire(arg) &amp;amp;&amp;amp;
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        //addWaiter是给当前线程创建一个节点,并将其加入等待队列
        //acquireQueued是当线程已经加入等待队列之后继续尝试获取锁.
        selfInterrupt();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;tryAcquire&lt;/strong&gt;&lt;/font&gt;， &lt;font color =&#39;red&#39;&gt; &lt;strong&gt;addWaiter&lt;/strong&gt;&lt;/font&gt;和 &lt;font color =&#39;red&#39;&gt; &lt;strong&gt;acquireQueued&lt;/strong&gt;&lt;/font&gt;都是十分重要的函数，我们接下来依次学习一下这些函数，理解它们的作用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//AQS类中的变量.
private volatile int state;
//这是FairSync的实现,AQS中未实现,子类按照自己的需要实现该函数
protected final boolean tryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    //获取AQS中的state变量,代表抽象概念的锁.
    int c = getState();
    if (c == 0) { //值为0,那么当前独占性变量还未被线程占有
        //如果当前阻塞队列上没有先来的线程在等待,UnfairSync这里的实现就不一致
        if (!hasQueuedPredecessors() &amp;amp;&amp;amp; 
            compareAndSetState(0, acquires)) {
            //成功cas,那么代表当前线程获得该变量的所有权,也就是说成功获得锁
            setExclusiveOwnerThread(current);
            // setExclusiveOwnerThread将本线程设置为独占性变量所有者线程
            return true;
        }
    }
    else if (current == getExclusiveOwnerThread()) {
        //如果该线程已经获取了独占性变量的所有权,那么根据重入性
        //原理,将state值进行加1,表示多次lock
        //由于已经获得锁,该段代码只会被一个线程同时执行,所以不需要
        //进行任何并行处理
        int nextc = c + acquires;
        if (nextc &amp;lt; 0)
            throw new Error(&amp;quot;Maximum lock count exceeded&amp;quot;);
        setState(nextc);
        return true;
    }
    //上述情况都不符合,说明获取锁失败
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由上述代码我们可以发现，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;tryAcquire&lt;/strong&gt;&lt;/font&gt;就是尝试获取那个线程独占的变量&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;。&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;的值表示其状态：如果是0，那么当前还没有线程独占此变量；否在就是已经有线程独占了这个变量，也就是代表已经有线程获得了锁。但是这个时候要再进行一次判断，看是否是当前线程自己获得的这个锁，如果是，就增加&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;的值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangzitao-blog.oss-cn-hangzhou.aliyuncs.com/20/07/09/%E6%B5%81%E7%A8%8B.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ReentranLock获得锁&lt;/p&gt;

&lt;p&gt;这里有几点需要说明一下，首先是&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;compareAndSetState&lt;/strong&gt;&lt;/font&gt;函数，这是使用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;CAS&lt;/strong&gt;&lt;/font&gt;操作来设置&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;的值，而且&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;值设置了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;volatile&lt;/strong&gt;&lt;/font&gt;修饰符，通过这两点来确保修改&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;的值不会出现多线程问题。然后是公平锁和非公平锁的区别问题，在&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;UnfairSync&lt;/strong&gt;&lt;/font&gt;的&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;nonfairTryAcquire&lt;/strong&gt;&lt;/font&gt;函数中不会在相同的位置上调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;hasQueuedPredecessors&lt;/strong&gt;&lt;/font&gt;来判断当前是否已经有线程在排队等待获得锁。&lt;/p&gt;

&lt;p&gt;如果&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;tryAcquire&lt;/strong&gt;&lt;/font&gt;返回true，那么就是获取锁成功；如果返回false，那么就是未获得锁，需要加入阻塞等待队列。我们下面就来看一下&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;addWaiter&lt;/strong&gt;&lt;/font&gt;的相关操作。&lt;/p&gt;

&lt;h1 id=&#34;4-0-等待锁的阻塞队列&#34;&gt;4.0  等待锁的阻塞队列&lt;/h1&gt;

&lt;p&gt;将保存当前线程信息的节点加入到等待队列的相关函数中涉及到了无锁队列的相关算法，由于在&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;中只是将节点添加到队尾，使用到的无锁算法也相对简单。真正的无锁队列的算法我们等到分析&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ConcurrentSkippedListMap&lt;/strong&gt;&lt;/font&gt;时在进行讲解。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private Node addWaiter(Node mode) {
    Node node = new Node(Thread.currentThread(), mode);
    //先使用快速入列法来尝试一下,如果失败,则进行更加完备的入列算法.
    //只有在必要的情况下才会使用更加复杂耗时的算法，也就是乐观的态度
    Node pred = tail; //列尾指针
    if (pred != null) {
        node.prev = pred; //步骤1:该节点的前趋指针指向tail
        if (compareAndSetTail(pred, node)){ //步骤二:cas将尾指针指向该节点
            pred.next = node;//步骤三:如果成果,让旧列尾节点的next指针指向该节点.
            return node;
        }
    }
    //cas失败,或在pred == null时调用enq
    enq(node);
    return node;
}
private Node enq(final Node node) {
    for (;;) { //cas无锁算法的标准for循环,不停的尝试
        Node t = tail;
        if (t == null) { //初始化
            if (compareAndSetHead(new Node())) 
            //需要注意的是head是一个哨兵的作用,并不代表某个要获取锁的线程节点
                tail = head;
        } else {
            //和addWaiter中一致,不过有了外侧的无限循环,不停的尝试,自旋锁
            node.prev = t;
            if (compareAndSetTail(t, node)) {
                t.next = node;
                return t;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通过调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;addWaiter&lt;/strong&gt;&lt;/font&gt;函数，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;将当前线程加入到了等待队列，但是还没有阻塞当前线程的执行，接下来我们就来分析一下&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;acquireQueued&lt;/strong&gt;&lt;/font&gt;函数。&lt;/p&gt;

&lt;h1 id=&#34;5-0-等待队列节点的操作&#34;&gt;5.0  等待队列节点的操作&lt;/h1&gt;

&lt;p&gt;由于进入阻塞状态的操作会降低执行效率，所以，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;会尽力避免试图获取独占性变量的线程进入阻塞状态。所以，当线程加入等待队列之后，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;acquireQueued&lt;/strong&gt;&lt;/font&gt;会执行一个for循环，每次都判断当前节点是否应该获得这个变量(在队首了)。如果不应该获取或在再次尝试获取失败，那么就调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;shouldParkAfterFailedAcquire&lt;/strong&gt;&lt;/font&gt;判断是否应该进入阻塞状态。如果当前节点之前的节点已经进入阻塞状态了，那么就可以判定当前节点不可能获取到锁，为了防止CPU不停的执行for循环，消耗CPU资源，调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;parkAndCheckInterrupt&lt;/strong&gt;&lt;/font&gt;函数来进入阻塞状态。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;final boolean acquireQueued(final Node node, int arg) {
    boolean failed = true;
    try {
        boolean interrupted = false;
        for (;;) { //一直执行,直到获取锁,返回.
            final Node p = node.predecessor(); 
            //node的前驱是head,就说明,node是将要获取锁的下一个节点.
            if (p == head &amp;amp;&amp;amp; tryAcquire(arg)) { //所以再次尝试获取独占性变量
                setHead(node); //如果成果,那么就将自己设置为head
                p.next = null; // help GC
                failed = false;
                return interrupted;
                //此时,还没有进入阻塞状态,所以直接返回false,表示不需要中断调用selfInterrupt函数
            }
            //判断是否要进入阻塞状态.如果`shouldParkAfterFailedAcquire`
            //返回true,表示需要进入阻塞
            //调用parkAndCheckInterrupt；否则表示还可以再次尝试获取锁,继续进行for循环
            if (shouldParkAfterFailedAcquire(p, node) &amp;amp;&amp;amp;
                parkAndCheckInterrupt())
                //调用parkAndCheckInterrupt进行阻塞,然后返回是否为中断状态
                interrupted = true;
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}

private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
    int ws = pred.waitStatus;
    if (ws == Node.SIGNAL) //前一个节点在等待独占性变量释放的通知,所以,当前节点可以阻塞
        return true;
    if (ws &amp;gt; 0) { //前一个节点处于取消获取独占性变量的状态,所以,可以跳过去
        //返回false
        do {
            node.prev = pred = pred.prev;
        } while (pred.waitStatus &amp;gt; 0);
        pred.next = node;
    } else {
        //将上一个节点的状态设置为signal,返回false,
        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
    }
    return false;
}
private final boolean parkAndCheckInterrupt() {
    LockSupport.park(this); //将AQS对象自己传入
    return Thread.interrupted();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;6-0-阻塞和中断&#34;&gt;6.0  阻塞和中断&lt;/h1&gt;

&lt;p&gt;由上述分析，我们知道了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;通过调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;LockSupport&lt;/strong&gt;&lt;/font&gt;的&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;park&lt;/strong&gt;&lt;/font&gt;方法来执行阻塞当前进程的操作。其实，这里的阻塞就是线程不再执行的含义，通过调用这个函数，线程进入阻塞状态，上述的&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;lock&lt;/strong&gt;&lt;/font&gt;操作也就阻塞了，等待中断或在独占性变量被释放。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void park(Object blocker) {
    Thread t = Thread.currentThread();
    setBlocker(t, blocker);//设置阻塞对象,用来记录线程被谁阻塞的,用于线程监控和分析工具来定位
    UNSAFE.park(false, 0L);//让当前线程不再被线程调度,就是当前线程不再执行.
    setBlocker(t, null);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于中断的相关知识，我们以后再说，就继续沿着AQS的主线，看一下释放独占性变量的相关操作吧。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangzitao-blog.oss-cn-hangzhou.aliyuncs.com/20/07/09/%E6%B5%81%E7%A8%8B2.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ReentrantLock未获得阻塞,加入队列&lt;/p&gt;

&lt;h1 id=&#34;7-0-unlock操作&#34;&gt;7.0  unlock操作&lt;/h1&gt;

&lt;p&gt;与&lt;font color =&#39;red&#39;&gt;&lt;strong&gt;lock&lt;/strong&gt;&lt;/font&gt;操作类似，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;unlock&lt;/strong&gt;&lt;/font&gt;操作调用了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;的relase方法，参数和调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;acquire&lt;/strong&gt;&lt;/font&gt;时一样，都是1。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public final boolean release(int arg) {
    if (tryRelease(arg)) { 
    //释放独占性变量,起始就是将status的值减1,因为acquire时是加1
        Node h = head;
        if (h != null &amp;amp;&amp;amp; h.waitStatus != 0)
            unparkSuccessor(h);//唤醒head的后继节点
        return true;
    }
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由上述代码可知，release就是先调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;tryRelease&lt;/strong&gt;&lt;/font&gt;来释放独占性变量。如果成功，那么就看一下是否有等待锁的阻塞线程，如果有，就调用&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;unparkSuccessor&lt;/strong&gt;&lt;/font&gt;来唤醒他们。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected final boolean tryRelease(int releases) {
    //由于只有一个线程可以获得独占先变量,所以,所有操作不需要考虑多线程
    int c = getState() - releases; 
    if (Thread.currentThread() != getExclusiveOwnerThread())
        throw new IllegalMonitorStateException();
    boolean free = false;
    if (c == 0) { //如果等于0,那么说明锁应该被释放了,否则表示当前线程有多次lock操作.
        free = true;
        setExclusiveOwnerThread(null);
    }
    setState(c);
    return free;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以看到&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;tryRelease&lt;/strong&gt;&lt;/font&gt;中的逻辑也体现了可重入锁的概念，只有等到&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;的值为0时，才代表锁真正被释放了。所以独占性变量&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;的值就代表锁的有无。当&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;state&lt;/strong&gt;&lt;/font&gt;=0时，表示锁未被占有，否在表示当前锁已经被占有。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void unparkSuccessor(Node node) {
    .....
    //一般来说,需要唤醒的线程就是head的下一个节点,但是如果它获取锁的操作被取消,或在节点为null时
    //就直接继续往后遍历,找到第一个未取消的后继节点.
    Node s = node.next;
    if (s == null || s.waitStatus &amp;gt; 0) {
        s = null;
        for (Node t = tail; t != null &amp;amp;&amp;amp; t != node; t = t.prev)
            if (t.waitStatus &amp;lt;= 0)
                s = t;
    }
    if (s != null)
        LockSupport.unpark(s.thread);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用了&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;unpark&lt;/strong&gt;&lt;/font&gt;方法后，进行&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;lock&lt;/strong&gt;&lt;/font&gt;操作被阻塞的线程就恢复到运行状态,就会再次执行&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;acquireQueued&lt;/strong&gt;&lt;/font&gt;中的无限for循环中的操作，再次尝试获取锁。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wangzitao-blog.oss-cn-hangzhou.aliyuncs.com/20/07/09/%E6%B5%81%E7%A8%8B3.webp&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;ReentrantLock释放锁并通知阻塞线程恢复执行&lt;/p&gt;

&lt;h1 id=&#34;8-0-后记&#34;&gt;8.0  后记&lt;/h1&gt;

&lt;p&gt;有关&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;和&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentrantLock&lt;/strong&gt;&lt;/font&gt;的分析就差不多结束了。不得不说，我第一次看到&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;的实现时真是震惊，以前都认为&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;Synchronized&lt;/strong&gt;&lt;/font&gt;和&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;ReentrantLock&lt;/strong&gt;&lt;/font&gt;的实现原理是一致的，都是依靠java虚拟机的功能实现的。没有想到还有&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;这样一个背后大Boss在提供帮助啊。学习了这个类的原理，我们对JUC的很多类的分析就简单了很多。此外，&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;AQS&lt;/strong&gt;&lt;/font&gt;涉及的&lt;font color =&#39;red&#39;&gt; &lt;strong&gt;CAS&lt;/strong&gt;&lt;/font&gt;操作和无锁队列的算法也为我们学习其他无锁算法提供了基础。&lt;/p&gt;

&lt;p&gt;转载自： &lt;a href=&#34;https://www.cnblogs.com/sweetorangezzz/p/13184325.html&#34;&gt;https://www.cnblogs.com/sweetorangezzz/p/13184325.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
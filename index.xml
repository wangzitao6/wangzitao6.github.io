<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>王子滔的学习笔记</title>
    <link>https://wangzitao6.github.io/</link>
    <description>Recent content on 王子滔的学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2019 15:06:02 +0800</lastBuildDate>
    
	<atom:link href="https://wangzitao6.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>http报文解析</title>
      <link>https://wangzitao6.github.io/2019-09-15-http%E6%8A%A5%E6%96%87%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 18 Sep 2019 15:06:02 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-09-15-http%E6%8A%A5%E6%96%87%E8%A7%A3%E6%9E%90/</guid>
      <description>General Request URL:请求的URL地址 Request Method: 请求方法，get/post/put/…… Status Code：状态码，200 为请求成功 Remote Address：路由地址 注： x-forwarded-for</description>
    </item>
    
    <item>
      <title>Java常量池理解与总结</title>
      <link>https://wangzitao6.github.io/2018-07-03-java%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 02 Sep 2019 16:47:28 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-07-03-java%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%90%86%E8%A7%A3%E4%B8%8E%E6%80%BB%E7%BB%93/</guid>
      <description>什么是常量 用final修饰的成员变量表示常量，值一但确定就无法修改。 final修饰的变量有三种：静态变量、实例变量和局部变量，分别表示三种类</description>
    </item>
    
    <item>
      <title>Integer的IntegerCache</title>
      <link>https://wangzitao6.github.io/2019-08-26-integer%E7%9A%84integercache/</link>
      <pubDate>Mon, 26 Aug 2019 10:23:46 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-08-26-integer%E7%9A%84integercache/</guid>
      <description>首先我们来看这样一个例子: int m = 10; int n = 10; System.out.println(m == n); int j = 128; int k = 128; System.out.println(j == k); 输出结果： true true 出现这样的一个结果大家都意外。 下面我们再看一个例子： Integer a</description>
    </item>
    
    <item>
      <title>Java位运算</title>
      <link>https://wangzitao6.github.io/2019-08-24-java%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sat, 24 Aug 2019 15:09:25 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-08-24-java%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>单位换算 bit：位 一个二进制数据0或1，是1bit； byte：字节 1 byte = 8 bit , 存储空间的基本计量单位； 一个英文字符占一个字节 1 字母 = 1 byte = 8</description>
    </item>
    
    <item>
      <title>Int类型强制转换byte类型</title>
      <link>https://wangzitao6.github.io/2019-08-24-int%E7%B1%BB%E5%9E%8B%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2byte%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 24 Aug 2019 11:13:05 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-08-24-int%E7%B1%BB%E5%9E%8B%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2byte%E7%B1%BB%E5%9E%8B/</guid>
      <description>java中为什么int类型的-129转换成byte类型的会变成127 int类型一般是4个字节，一个字节有8位，这样int型数据二进制的完整形</description>
    </item>
    
    <item>
      <title>原码 补码 反码</title>
      <link>https://wangzitao6.github.io/2019-08-23-%E5%8E%9F%E7%A0%81-%E8%A1%A5%E7%A0%81-%E5%8F%8D%E7%A0%81/</link>
      <pubDate>Fri, 23 Aug 2019 16:28:33 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-08-23-%E5%8E%9F%E7%A0%81-%E8%A1%A5%E7%A0%81-%E5%8F%8D%E7%A0%81/</guid>
      <description>Java数据类型 了解原码、补码、反码之前，我们先看下java的数据类型： Java基本类型共有八种，它们的取值范围是固定的，不会随着机器硬件环</description>
    </item>
    
    <item>
      <title>MYSQL配置读取</title>
      <link>https://wangzitao6.github.io/2019-08-19-mysql%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96/</link>
      <pubDate>Mon, 19 Aug 2019 15:06:29 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-08-19-mysql%E9%85%8D%E7%BD%AE%E8%AF%BB%E5%8F%96/</guid>
      <description>配置文件读取 在Unix, Linux 或者 Mac OS X 系统中, MYSQL 从以下配置文件中读取启动配置, 读取顺序由上到下: File Name Purpose /etc/my.cnf 全局配置选项 /etc/mysql/my.cnf 全局配置选项 SYSCONFDIR/my.cnf 全局配置选</description>
    </item>
    
    <item>
      <title>Markdown进阶语法</title>
      <link>https://wangzitao6.github.io/2018-08-02-markdown%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 02 Aug 2019 13:59:37 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-08-02-markdown%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95/</guid>
      <description>字体、大小、颜色 &amp;lt;font face=&amp;quot;黑体&amp;quot;&amp;gt;我是黑体字&amp;lt;/font&amp;gt; &amp;lt;font face=&amp;quot;微软雅黑&amp;quo</description>
    </item>
    
    <item>
      <title>了解三次握手与四次挥手</title>
      <link>https://wangzitao6.github.io/2019-04-20-%E4%BA%86%E8%A7%A3%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
      <pubDate>Sat, 20 Apr 2019 14:38:17 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-04-20-%E4%BA%86%E8%A7%A3%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
      <description>三次握手 TCP协议中，主动发起请求的一端称为『客户端』，被动连接的一端称为『服务端』。不管是客户端还是服务端，TCP连接建立完后都能发送和接</description>
    </item>
    
    <item>
      <title>了解ARP协议</title>
      <link>https://wangzitao6.github.io/2019-04-19-%E4%BA%86%E8%A7%A3arp%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Fri, 19 Apr 2019 13:50:49 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-04-19-%E4%BA%86%E8%A7%A3arp%E5%8D%8F%E8%AE%AE/</guid>
      <description>MAC地址 什么是MAC地址？MAC地址与IP有什么区别？ 大概了解后禁不住会问，那么有了IP地址为什么还要一个MAC地址呢？ 知乎回答:http</description>
    </item>
    
    <item>
      <title>tcpip协议与socket区别</title>
      <link>https://wangzitao6.github.io/2019-04-19-tcpip%E5%8D%8F%E8%AE%AE%E4%B8%8Esocket%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 19 Apr 2019 10:29:22 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-04-19-tcpip%E5%8D%8F%E8%AE%AE%E4%B8%8Esocket%E5%8C%BA%E5%88%AB/</guid>
      <description>TCP/IP协议的组成 TCP/IP传输协议，即传输控制/网络协议，也叫作网络通讯协议。它是在网络的使用中的最基本的通信协议。 TCP/IP协议</description>
    </item>
    
    <item>
      <title>Mysql内置条件判断函数</title>
      <link>https://wangzitao6.github.io/2018-03-16-mysql%E5%86%85%E7%BD%AE%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 16 Mar 2019 11:33:44 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-03-16-mysql%E5%86%85%E7%BD%AE%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0/</guid>
      <description>常见的条件判断函数 Name Description CASE Case operator IF() If/else construct IFNULL() Null if/else construct NULLIF(expr1,expr2) Return NULL if expr1 = expr2 CASE 为了后面容易举例子，我们先创建一张表并插入数据 CREATE TABLE demo ( id INT, NAME VARCHAR ( 20 ), age INT ) ENGINE = INNODB; insert</description>
    </item>
    
    <item>
      <title>设计模式之单例模式</title>
      <link>https://wangzitao6.github.io/2018-11-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Mon, 12 Nov 2018 15:11:17 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-11-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例模式 首先我们来考虑下，如何设计一个类，在系统中只能生成该类的一个实体? 懒汉，线程不安全 面对这个问题，我们可以想到把构造函数私有化，以禁止</description>
    </item>
    
    <item>
      <title>HashMap实现原理</title>
      <link>https://wangzitao6.github.io/2019-09-12-hashmap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 12 Sep 2018 11:49:31 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2019-09-12-hashmap%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>什么是哈希表 哈希表（hash table）也叫散列表，是一种非常重要的数据结构，应用场景及其丰富，许多缓存技术（比如memcached）的核心</description>
    </item>
    
    <item>
      <title>了解MySQL中EXPLAIN解释命令</title>
      <link>https://wangzitao6.github.io/2018-08-13-%E4%BA%86%E8%A7%A3explain%E8%A7%A3%E9%87%8A%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 13 Aug 2018 11:49:13 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-08-13-%E4%BA%86%E8%A7%A3explain%E8%A7%A3%E9%87%8A%E5%91%BD%E4%BB%A4/</guid>
      <description>1 EXPLAIN概念 EXPLAIN会向我们提供一些MySQL是执行sql的信息： EXPLAIN可以解释说明 SELECT, DELETE, INSERT, REPLACE, and UPDATE 等语句. 当EXPLAI</description>
    </item>
    
    <item>
      <title>死锁-了解MySQL死锁日志</title>
      <link>https://wangzitao6.github.io/2018-08-05-%E6%AD%BB%E9%94%81%E6%97%A5%E5%BF%97/</link>
      <pubDate>Sun, 05 Aug 2018 13:36:46 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-08-05-%E6%AD%BB%E9%94%81%E6%97%A5%E5%BF%97/</guid>
      <description>锁的种类&amp;amp;概念 Shared and Exclusive Locks 1. Shared lock: 共享锁,官方描述：permits the transaction that holds the lock to read a row eg：select * from xx where a=1 lock in share mode 2. Exclusive Locks：</description>
    </item>
    
    <item>
      <title>MySQL加锁处理分析</title>
      <link>https://wangzitao6.github.io/2018-08-03-mysql%E5%8A%A0%E9%94%81%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 03 Aug 2018 10:12:06 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-08-03-mysql%E5%8A%A0%E9%94%81%E5%A4%84%E7%90%86%E5%88%86%E6%9E%90/</guid>
      <description>1 背景 MySQL/InnoDB的加锁分析，一直是一个比较困难的话题。我在工作过程中，经常会有同事咨询这方面的问题。同时，微博上也经常会收到M</description>
    </item>
    
    <item>
      <title>死锁-常见SQL的语句加锁分析</title>
      <link>https://wangzitao6.github.io/2018-07-29-%E5%B8%B8%E8%A7%81sql%E7%9A%84%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 29 Jul 2018 10:20:22 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-07-29-%E5%B8%B8%E8%A7%81sql%E7%9A%84%E8%AF%AD%E5%8F%A5%E5%8A%A0%E9%94%81%E5%88%86%E6%9E%90/</guid>
      <description>解决死锁之路 - 常见 SQL 语句的加锁分析 这篇博客将对一些常见的 SQL 语句进行加锁分析，看看我们平时执行的那些 SQL 都会加什么锁。只有对我们所写的 SQL 语句加锁</description>
    </item>
    
    <item>
      <title>死锁 - 了解常见的锁类型</title>
      <link>https://wangzitao6.github.io/2018-07-28-%E4%BA%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E9%94%81%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 28 Jul 2018 10:20:22 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-07-28-%E4%BA%86%E8%A7%A3%E5%B8%B8%E8%A7%81%E7%9A%84%E9%94%81%E7%B1%BB%E5%9E%8B/</guid>
      <description>表锁 vs. 行锁 在 MySQL 中锁的种类有很多，但是最基本的还是表锁和行锁：表锁指的是对一整张表加锁，一般是 DDL 处理时使用，也可以自己在 SQL 中指定；而行锁指的是</description>
    </item>
    
    <item>
      <title>死锁 - 了解事务与隔离级别</title>
      <link>https://wangzitao6.github.io/2018-07-25-%E4%BA%86%E8%A7%A3%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Wed, 25 Jul 2018 15:36:47 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-07-25-%E4%BA%86%E8%A7%A3%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>这个月线上环境突然经常报警，排查后发现了下面这样的异常，一天出现三四次的样子。看异常信息就知道是发生了数据库死锁，由于这块对业务影响不是很大</description>
    </item>
    
    <item>
      <title>Java中静态代码块、代码块、main()方法和构造函数加载顺序</title>
      <link>https://wangzitao6.github.io/2018-07-02-java%E4%B8%AD%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A3%E7%A0%81%E5%9D%97main%E6%96%B9%E6%B3%95%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Mon, 02 Jul 2018 10:38:28 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-07-02-java%E4%B8%AD%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BB%A3%E7%A0%81%E5%9D%97main%E6%96%B9%E6%B3%95%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F/</guid>
      <description>静态代码块：用staitc声明，jvm加载类时执行，仅执行一次。 构造代码块：类中直接用{}定义，每一次创建对象时执行。 同一个类中，执行顺序优</description>
    </item>
    
    <item>
      <title>Jvm类加载过程</title>
      <link>https://wangzitao6.github.io/2018-07-02-jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 02 Jul 2018 10:05:16 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-07-02-jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</guid>
      <description>什么是类加载 虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的java类型，</description>
    </item>
    
    <item>
      <title>gitment登录失败</title>
      <link>https://wangzitao6.github.io/2018-06-12-gitment%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Tue, 12 Jun 2018 09:31:57 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-06-12-gitment%E7%99%BB%E5%BD%95%E5%A4%B1%E8%B4%A5/</guid>
      <description>gitment登录失败 搭建个人博客之后, 最终还是选择了gitment. 最近突然发现gitment登录失败,报错 [object ProgressEvent]</description>
    </item>
    
    <item>
      <title>HotSpot选项笔记</title>
      <link>https://wangzitao6.github.io/2018-06-05-%E8%99%9A%E6%8B%9F%E6%9C%BAhotspot%E9%80%89%E9%A1%B9%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 05 Jun 2018 11:05:33 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-06-05-%E8%99%9A%E6%8B%9F%E6%9C%BAhotspot%E9%80%89%E9%A1%B9%E7%AC%94%E8%AE%B0/</guid>
      <description>语法 java [ options ] class [ argument &amp;hellip; ] java [ options ] -jar file.jar [ argument &amp;hellip; ] 标准选项 -d32|-d64 -client|-server 以客户端模式还是服务器模式执行虚拟机。 服务器模式的特点是启动速度比较慢，但运行时性能和</description>
    </item>
    
    <item>
      <title>校验手机号码正则表达式</title>
      <link>https://wangzitao6.github.io/2018-05-29-%E6%A0%A1%E9%AA%8C%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 29 May 2018 10:16:26 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-05-29-%E6%A0%A1%E9%AA%8C%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>需要通过的手机号： 中国移动：134、135、136、137、138、139、148、150、151、152、157(TD)、158、159、</description>
    </item>
    
    <item>
      <title>TcpIp协议族与socket区别</title>
      <link>https://wangzitao6.github.io/2018-05-28-tcpip%E5%8D%8F%E8%AE%AE%E6%97%8F%E4%B8%8Esocket%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 28 May 2018 00:08:48 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-05-28-tcpip%E5%8D%8F%E8%AE%AE%E6%97%8F%E4%B8%8Esocket%E5%8C%BA%E5%88%AB/</guid>
      <description>简介 TCP/IP协议是指因特网整个TCP/IP协议族。不同于ISO模型的七个分层，TCP/IP协议参考模型把所有的TCP/IP系列协议归类到</description>
    </item>
    
    <item>
      <title>SSH端口转发</title>
      <link>https://wangzitao6.github.io/2018-05-12-%E4%BA%86%E8%A7%A3ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Sat, 12 May 2018 15:37:21 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-05-12-%E4%BA%86%E8%A7%A3ssh%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</guid>
      <description>概述 当你在咖啡馆享受免费 WiFi 的时候，有没有想到可能有人正在窃取你的密码及隐私信息？当你发现实验室的防火墙阻止了你的网络应用端口，是不是有苦难言</description>
    </item>
    
    <item>
      <title>了解SQL注入</title>
      <link>https://wangzitao6.github.io/2018-05-06-%E4%BA%86%E8%A7%A3sql%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Sun, 06 May 2018 10:41:29 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-05-06-%E4%BA%86%E8%A7%A3sql%E6%B3%A8%E5%85%A5/</guid>
      <description>1.简介 SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。一般来</description>
    </item>
    
    <item>
      <title>Hugo集成Algolia搜索</title>
      <link>https://wangzitao6.github.io/2018-04-10-%E9%9B%86%E6%88%90algolia%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Tue, 10 Apr 2018 18:21:17 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-04-10-%E9%9B%86%E6%88%90algolia%E6%90%9C%E7%B4%A2/</guid>
      <description>1.简介 Algolia是为你的 APP 或者网站添加搜索的最佳方式。 开发人员可以使用 API 上传并同步希望搜索的数据，然后可以进行相关的配置，比如产品转化</description>
    </item>
    
    <item>
      <title>Hugo集成gitment评论系统</title>
      <link>https://wangzitao6.github.io/2018-03-20-%E9%9B%86%E6%88%90gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 20 Mar 2018 11:06:11 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-03-20-%E9%9B%86%E6%88%90gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>引言 Gitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown</description>
    </item>
    
    <item>
      <title>利用Travis CI将Hugo自動部署到Github Pages</title>
      <link>https://wangzitao6.github.io/2018-03-10-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Sat, 10 Mar 2018 00:16:42 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-03-10-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
      <description>1.简介 Hugo 有着 Go 语言的几大优点：跨平台、执行快、部署简单、无需安装依赖，同时作为一款静态博客系统，它主题多、拓展性好、操作简单。是用来搭建个</description>
    </item>
    
    <item>
      <title>ip地址,子网掩码,网关,dns协议关系</title>
      <link>https://wangzitao6.github.io/2018-02-15-%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Thu, 15 Feb 2018 23:44:45 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2018-02-15-%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB/</guid>
      <description>简介 IP地址，标示你电脑的身份！ 子网掩码，可以标示子网划分的情况，所属子网。 默认网关，数据包默认选择的出口！一般是你的路由器地址！ DNS服务</description>
    </item>
    
    <item>
      <title>markdown常用语法</title>
      <link>https://wangzitao6.github.io/2017-10-28-markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sat, 28 Oct 2017 22:59:30 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2017-10-28-markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</guid>
      <description>1.内容目录 在段落中填写 [TOC] 以显示全文内容的目录结构。 2.标题 # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级</description>
    </item>
    
    <item>
      <title>用hugo搭建个人网站</title>
      <link>https://wangzitao6.github.io/2017-08-28-%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</link>
      <pubDate>Mon, 28 Aug 2017 23:41:16 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2017-08-28-%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</guid>
      <description>摘要： 本文将介绍什么是Hugo，怎么用Hugo搭建个人网站，如何本地测试及如何发布到Github并生成Github pages。 什么是Hugo</description>
    </item>
    
    <item>
      <title>git常用命令</title>
      <link>https://wangzitao6.github.io/2017-11-03-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 03 Nov 2016 23:10:30 +0800</pubDate>
      
      <guid>https://wangzitao6.github.io/2017-11-03-git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1. 分支操作 1.创建，删除本地分支 git branch 分支名 创建名称为branchname的本地分支 git branch branchName git branch -d 分支名 删除名称为branchname的本地分支</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangzitao6.github.io/bak/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangzitao6.github.io/bak/readme/</guid>
      <description> 23.1 Customizing the Banner 启动时打印的banner可以通过向类路径中添加banner.txt文件或通过将banner.location设置为这样一个文件的位置来更改。 如果文件有不寻常的编码，你可以设置banner.charset。字符集(默认为UTF-8 )。
 ${application.version}：MANIFEST.MF文件中的版本号,例如 Implementation-Version: 1.0 打印为 1.0.
 ${application.formatted-version}：格式化后的MANIFEST.MF文件中的版本号,(用括号括起来，前缀为v). 例如 (v1.0).
 ${spring-boot.version}：正在使用的SpringBoot版本. 例如 1.3.7.RELEASE.
 ${spring-boot.formatted-version}：格式化后的正在使用的SpringBoot版本.,(用括号括起来，前缀为v). 例如 (v1.3.7.RELEASE).
 ${Ansi.NAME} (or ${AnsiColor.NAME}, ${AnsiBackground.NAME}, ${AnsiStyle.NAME})： NAME是一个ANSI 码. 详情看 AnsiPropertySource.
 ${application.title}：：MANIFEST.MF文件中的标题. 例如 Implementation-Title: MyApp 展示为 MyApp.
  您还可以使用spring.main.banner模式属性来确定是否必须使用配置的日志记录器(log)在System.out (console)上打印横幅，或者根本不打印横幅(off)。
 如果你想关闭banner,同样可以在YAML配置off或者false来关闭。
 spring: main: banner-mode: &amp;quot;off&amp;quot;  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangzitao6.github.io/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangzitao6.github.io/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangzitao6.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangzitao6.github.io/top/about/</guid>
      <description>美食爱好者，生活探险家 | 这里是 王子滔 的博客，与你一起发现更大的世界。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wangzitao6.github.io/top/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wangzitao6.github.io/top/books/</guid>
      <description>Machine learning学习笔记 Coursera 在线课程 Machine learning 笔记 讲师: 吴恩达(Andrew Ng)  课程地址：https://www.coursera.org/learn/machine-learning</description>
    </item>
    
  </channel>
</rss>